// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Device {
  id                String   @id @default(cuid())
  deviceId          String   @unique @map("device_id")
  deviceName        String   @map("device_name")
  ipAddress         String   @map("ip_address")
  macAddress        String?  @map("mac_address")
  firmwareVersion   String   @map("firmware_version")
  status            DeviceStatus @default(OFFLINE)
  powerState        Boolean  @default(false) @map("power_state")
  energyConsumption Float    @default(0) @map("energy_consumption")
  totalEnergy       Float    @default(0) @map("total_energy")
  wifiSignal        Int      @default(-70) @map("wifi_signal")
  uptime            Int      @default(0)
  voltage           Float?
  current           Float?
  
  // Critical device marking
  isCritical        Boolean  @default(false) @map("is_critical")
  
  // Custom category relationship
  categoryId        String?  @map("category_id")
  category          Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  description       String?
  
  // Data Logging Configuration
  enableDataLogging Boolean  @default(true) @map("enable_data_logging")
  dataRetentionDays Int      @default(30) @map("data_retention_days")
  minLogInterval    Int      @default(60) @map("min_log_interval_seconds")
  
  lastSeen          DateTime @default(now()) @map("last_seen")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  energyReadings    EnergyReading[]
  deviceLogs        DeviceLog[]
  workflowSteps     WorkflowStep[]
  workflowConditions WorkflowCondition[]

  @@map("devices")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  color       String   // Hex color code
  icon        String?  // Optional icon name
  description String?
  isDefault   Boolean  @default(false) // For system default categories
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  devices     Device[]

  @@map("categories")
}

model EnergyReading {
  id        String   @id @default(cuid())
  deviceId  String   @map("device_id")
  power     Float
  energy    Float
  voltage   Float?
  current   Float?
  timestamp DateTime @default(now())
  
  // Relations
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("energy_readings")
}

model DeviceLog {
  id        String    @id @default(cuid())
  deviceId  String    @map("device_id")
  level     LogLevel  @default(INFO)
  message   String
  data      Json?
  timestamp DateTime  @default(now())
  
  // Relations
  device    Device    @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("device_logs")
}

model Workflow {
  id          String    @id @default(cuid())
  name        String
  description String?
  enabled     Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  steps       WorkflowStep[]
  executions  WorkflowExecution[]

  @@map("workflows")
}

model WorkflowStep {
  id          String    @id @default(cuid())
  workflowId  String    @map("workflow_id")
  deviceId    String    @map("device_id")
  action      WorkflowAction
  delay       Int?      // delay in seconds
  order       Int       // execution order
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relations
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  device      Device    @relation(fields: [deviceId], references: [deviceId], onDelete: Cascade)
  conditions  WorkflowCondition[]

  @@map("workflow_steps")
}

model WorkflowCondition {
  id          String    @id @default(cuid())
  stepId      String    @map("step_id")
  deviceId    String    @map("device_id")
  state       DeviceState
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relations
  step        WorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  device      Device    @relation(fields: [deviceId], references: [deviceId], onDelete: Cascade)

  @@map("workflow_conditions")
}

model WorkflowExecution {
  id          String    @id @default(cuid())
  workflowId  String    @map("workflow_id")
  status      ExecutionStatus @default(PENDING)
  startedAt   DateTime  @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")
  errorMessage String?  @map("error_message")
  
  // Relations
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_executions")
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  ERROR
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum WorkflowAction {
  TURN_ON
  TURN_OFF
  DELAY
}

enum DeviceState {
  ON
  OFF
}

model SecurityConfig {
  id            String   @id @default(cuid())
  isEnabled     Boolean  @default(false) @map("is_enabled")
  hasPassword   Boolean  @default(false) @map("has_password")
  passwordHash  String?  @map("password_hash")
  passwordSalt  String?  @map("password_salt")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("security_config")
}

model LdapConfig {
  id        String   @id @default(cuid())
  ldapUrl   String   @map("ldap_url")
  baseDn    String   @map("base_dn")
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ldap_config")
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
} 